// Generated by gencpp from file world_canvas_msgs/SetKeywordRequest.msg
// DO NOT EDIT!


#ifndef WORLD_CANVAS_MSGS_MESSAGE_SETKEYWORDREQUEST_H
#define WORLD_CANVAS_MSGS_MESSAGE_SETKEYWORDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <uuid_msgs/UniqueID.h>

namespace world_canvas_msgs
{
template <class ContainerAllocator>
struct SetKeywordRequest_
{
  typedef SetKeywordRequest_<ContainerAllocator> Type;

  SetKeywordRequest_()
    : id()
    , keyword()
    , action(0)  {
    }
  SetKeywordRequest_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , keyword(_alloc)
    , action(0)  {
  (void)_alloc;
    }



   typedef  ::uuid_msgs::UniqueID_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _keyword_type;
  _keyword_type keyword;

   typedef uint8_t _action_type;
  _action_type action;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ADD)
  #undef ADD
#endif
#if defined(_WIN32) && defined(DEL)
  #undef DEL
#endif

  enum {
    ADD = 1u,
    DEL = 2u,
  };


  typedef boost::shared_ptr< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetKeywordRequest_

typedef ::world_canvas_msgs::SetKeywordRequest_<std::allocator<void> > SetKeywordRequest;

typedef boost::shared_ptr< ::world_canvas_msgs::SetKeywordRequest > SetKeywordRequestPtr;
typedef boost::shared_ptr< ::world_canvas_msgs::SetKeywordRequest const> SetKeywordRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator1> & lhs, const ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.keyword == rhs.keyword &&
    lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator1> & lhs, const ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace world_canvas_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ed2d01a15fce27c3182cc6ddffe0591";
  }

  static const char* value(const ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ed2d01a15fce27cULL;
  static const uint64_t static_value2 = 0x3182cc6ddffe0591ULL;
};

template<class ContainerAllocator>
struct DataType< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "world_canvas_msgs/SetKeywordRequest";
  }

  static const char* value(const ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Add/remove a specific keyword to the specified annotation\n"
"uint8 ADD = 1\n"
"uint8 DEL = 2\n"
"\n"
"uuid_msgs/UniqueID id\n"
"string keyword\n"
"uint8 action\n"
"\n"
"================================================================================\n"
"MSG: uuid_msgs/UniqueID\n"
"# A universally unique identifier (UUID).\n"
"#\n"
"#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n"
"#  http://tools.ietf.org/html/rfc4122.html\n"
"\n"
"uint8[16] uuid\n"
;
  }

  static const char* value(const ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.keyword);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetKeywordRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::world_canvas_msgs::SetKeywordRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    s << std::endl;
    Printer< ::uuid_msgs::UniqueID_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "keyword: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.keyword);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORLD_CANVAS_MSGS_MESSAGE_SETKEYWORDREQUEST_H
