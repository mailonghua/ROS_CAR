// Generated by gencpp from file world_canvas_msgs/PublishMapRequest.msg
// DO NOT EDIT!


#ifndef WORLD_CANVAS_MSGS_MESSAGE_PUBLISHMAPREQUEST_H
#define WORLD_CANVAS_MSGS_MESSAGE_PUBLISHMAPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace world_canvas_msgs
{
template <class ContainerAllocator>
struct PublishMapRequest_
{
  typedef PublishMapRequest_<ContainerAllocator> Type;

  PublishMapRequest_()
    : map_id()  {
    }
  PublishMapRequest_(const ContainerAllocator& _alloc)
    : map_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_id_type;
  _map_id_type map_id;





  typedef boost::shared_ptr< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PublishMapRequest_

typedef ::world_canvas_msgs::PublishMapRequest_<std::allocator<void> > PublishMapRequest;

typedef boost::shared_ptr< ::world_canvas_msgs::PublishMapRequest > PublishMapRequestPtr;
typedef boost::shared_ptr< ::world_canvas_msgs::PublishMapRequest const> PublishMapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator1> & lhs, const ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.map_id == rhs.map_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator1> & lhs, const ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace world_canvas_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d742ddbd5e3e8937162044ae4b300275";
  }

  static const char* value(const ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd742ddbd5e3e8937ULL;
  static const uint64_t static_value2 = 0x162044ae4b300275ULL;
};

template<class ContainerAllocator>
struct DataType< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "world_canvas_msgs/PublishMapRequest";
  }

  static const char* value(const ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Service used to publish a given map from the database to the /map topic.\n"
"\n"
"string map_id\n"
;
  }

  static const char* value(const ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PublishMapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::world_canvas_msgs::PublishMapRequest_<ContainerAllocator>& v)
  {
    s << indent << "map_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORLD_CANVAS_MSGS_MESSAGE_PUBLISHMAPREQUEST_H
