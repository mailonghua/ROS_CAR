// Generated by gencpp from file world_canvas_msgs/WorldCanvas.msg
// DO NOT EDIT!


#ifndef WORLD_CANVAS_MSGS_MESSAGE_WORLDCANVAS_H
#define WORLD_CANVAS_MSGS_MESSAGE_WORLDCANVAS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace world_canvas_msgs
{
template <class ContainerAllocator>
struct WorldCanvas_
{
  typedef WorldCanvas_<ContainerAllocator> Type;

  WorldCanvas_()
    : timestamp()
    , name()
    , description()
    , geometry()  {
    }
  WorldCanvas_(const ContainerAllocator& _alloc)
    : timestamp()
    , name(_alloc)
    , description(_alloc)
    , geometry(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _geometry_type;
  _geometry_type geometry;





  typedef boost::shared_ptr< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> const> ConstPtr;

}; // struct WorldCanvas_

typedef ::world_canvas_msgs::WorldCanvas_<std::allocator<void> > WorldCanvas;

typedef boost::shared_ptr< ::world_canvas_msgs::WorldCanvas > WorldCanvasPtr;
typedef boost::shared_ptr< ::world_canvas_msgs::WorldCanvas const> WorldCanvasConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::world_canvas_msgs::WorldCanvas_<ContainerAllocator1> & lhs, const ::world_canvas_msgs::WorldCanvas_<ContainerAllocator2> & rhs)
{
  return lhs.timestamp == rhs.timestamp &&
    lhs.name == rhs.name &&
    lhs.description == rhs.description &&
    lhs.geometry == rhs.geometry;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::world_canvas_msgs::WorldCanvas_<ContainerAllocator1> & lhs, const ::world_canvas_msgs::WorldCanvas_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace world_canvas_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d7c521a48d85a2b09f0d0c03fe5f648";
  }

  static const char* value(const ::world_canvas_msgs::WorldCanvas_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d7c521a48d85a2bULL;
  static const uint64_t static_value2 = 0x09f0d0c03fe5f648ULL;
};

template<class ContainerAllocator>
struct DataType< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "world_canvas_msgs/WorldCanvas";
  }

  static const char* value(const ::world_canvas_msgs::WorldCanvas_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# World canvas: a generic descriptor for a world, typically containing one or more geometric maps\n"
"# plus semantic information in the form of annotations.\n"
"#  - timestamp   : Creation/last update time\n"
"#  - name        : World name; it must be unique\n"
"#  - description : Informal description\n"
"#  - geometry    : 2D, 3D (just informative by now)\n"
"\n"
"time timestamp\n"
"string name\n"
"string description\n"
"string geometry\n"
;
  }

  static const char* value(const ::world_canvas_msgs::WorldCanvas_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.name);
      stream.next(m.description);
      stream.next(m.geometry);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorldCanvas_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::world_canvas_msgs::WorldCanvas_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::world_canvas_msgs::WorldCanvas_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "geometry: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.geometry);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORLD_CANVAS_MSGS_MESSAGE_WORLDCANVAS_H
