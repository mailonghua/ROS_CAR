// Generated by gencpp from file world_canvas_msgs/GetAnnotationsDataResponse.msg
// DO NOT EDIT!


#ifndef WORLD_CANVAS_MSGS_MESSAGE_GETANNOTATIONSDATARESPONSE_H
#define WORLD_CANVAS_MSGS_MESSAGE_GETANNOTATIONSDATARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <world_canvas_msgs/AnnotationData.h>

namespace world_canvas_msgs
{
template <class ContainerAllocator>
struct GetAnnotationsDataResponse_
{
  typedef GetAnnotationsDataResponse_<ContainerAllocator> Type;

  GetAnnotationsDataResponse_()
    : result(false)
    , message()
    , data()  {
    }
  GetAnnotationsDataResponse_(const ContainerAllocator& _alloc)
    : result(false)
    , message(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef std::vector< ::world_canvas_msgs::AnnotationData_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::world_canvas_msgs::AnnotationData_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetAnnotationsDataResponse_

typedef ::world_canvas_msgs::GetAnnotationsDataResponse_<std::allocator<void> > GetAnnotationsDataResponse;

typedef boost::shared_ptr< ::world_canvas_msgs::GetAnnotationsDataResponse > GetAnnotationsDataResponsePtr;
typedef boost::shared_ptr< ::world_canvas_msgs::GetAnnotationsDataResponse const> GetAnnotationsDataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator1> & lhs, const ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.message == rhs.message &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator1> & lhs, const ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace world_canvas_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5138c2b0e307350745b95b31397311c4";
  }

  static const char* value(const ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5138c2b0e3073507ULL;
  static const uint64_t static_value2 = 0x45b95b31397311c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "world_canvas_msgs/GetAnnotationsDataResponse";
  }

  static const char* value(const ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# What went wrong, if anything\n"
"bool result\n"
"string message\n"
"\n"
"AnnotationData[] data \n"
"\n"
"================================================================================\n"
"MSG: world_canvas_msgs/AnnotationData\n"
"# Data for an element in a semantic map stored as a byte array generated by ros::serialization\n"
"# These objects are unique, although they can be referenced by one or more annotations\n"
"#  - id   : Object unique id; data_id field on Annotation messages point to this uuid\n"
"#  - type : Object type; duplicated from annotation for convenience on deserialization\n"
"#  - data : Serialized data\n"
"uuid_msgs/UniqueID id\n"
"string type\n"
"uint8[] data\n"
"\n"
"================================================================================\n"
"MSG: uuid_msgs/UniqueID\n"
"# A universally unique identifier (UUID).\n"
"#\n"
"#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n"
"#  http://tools.ietf.org/html/rfc4122.html\n"
"\n"
"uint8[16] uuid\n"
;
  }

  static const char* value(const ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.message);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetAnnotationsDataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::world_canvas_msgs::GetAnnotationsDataResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::world_canvas_msgs::AnnotationData_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORLD_CANVAS_MSGS_MESSAGE_GETANNOTATIONSDATARESPONSE_H
