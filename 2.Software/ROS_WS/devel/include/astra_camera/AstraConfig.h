//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the astra_camera package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __astra_camera__ASTRACONFIG_H__
#define __astra_camera__ASTRACONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace astra_camera
{
  class AstraConfigStatics;

  class AstraConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(AstraConfig &config, const AstraConfig &max, const AstraConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const AstraConfig &config1, const AstraConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, AstraConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const AstraConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, AstraConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const AstraConfig &config) const = 0;
      virtual void getValue(const AstraConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T AstraConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T AstraConfig::* field;

      virtual void clamp(AstraConfig &config, const AstraConfig &max, const AstraConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const AstraConfig &config1, const AstraConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, AstraConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const AstraConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, AstraConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const AstraConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const AstraConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, AstraConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, AstraConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<AstraConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(AstraConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("rgb_preferred"==(*_i)->name){rgb_preferred = boost::any_cast<bool>(val);}
        if("ir_mode"==(*_i)->name){ir_mode = boost::any_cast<int>(val);}
        if("color_mode"==(*_i)->name){color_mode = boost::any_cast<int>(val);}
        if("depth_mode"==(*_i)->name){depth_mode = boost::any_cast<int>(val);}
        if("depth_registration"==(*_i)->name){depth_registration = boost::any_cast<bool>(val);}
        if("color_depth_synchronization"==(*_i)->name){color_depth_synchronization = boost::any_cast<bool>(val);}
        if("auto_exposure"==(*_i)->name){auto_exposure = boost::any_cast<bool>(val);}
        if("auto_white_balance"==(*_i)->name){auto_white_balance = boost::any_cast<bool>(val);}
        if("data_skip"==(*_i)->name){data_skip = boost::any_cast<int>(val);}
        if("ir_time_offset"==(*_i)->name){ir_time_offset = boost::any_cast<double>(val);}
        if("color_time_offset"==(*_i)->name){color_time_offset = boost::any_cast<double>(val);}
        if("depth_time_offset"==(*_i)->name){depth_time_offset = boost::any_cast<double>(val);}
        if("depth_ir_offset_x"==(*_i)->name){depth_ir_offset_x = boost::any_cast<double>(val);}
        if("depth_ir_offset_y"==(*_i)->name){depth_ir_offset_y = boost::any_cast<double>(val);}
        if("z_offset_mm"==(*_i)->name){z_offset_mm = boost::any_cast<int>(val);}
        if("z_scaling"==(*_i)->name){z_scaling = boost::any_cast<double>(val);}
        if("use_device_time"==(*_i)->name){use_device_time = boost::any_cast<bool>(val);}
      }
    }

    bool rgb_preferred;
int ir_mode;
int color_mode;
int depth_mode;
bool depth_registration;
bool color_depth_synchronization;
bool auto_exposure;
bool auto_white_balance;
int data_skip;
double ir_time_offset;
double color_time_offset;
double depth_time_offset;
double depth_ir_offset_x;
double depth_ir_offset_y;
int z_offset_mm;
double z_scaling;
bool use_device_time;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool rgb_preferred;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int ir_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int color_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int depth_mode;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool depth_registration;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool color_depth_synchronization;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_exposure;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool auto_white_balance;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int data_skip;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double ir_time_offset;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double color_time_offset;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double depth_time_offset;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double depth_ir_offset_x;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double depth_ir_offset_y;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int z_offset_mm;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double z_scaling;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool use_device_time;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("AstraConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const AstraConfig &__max__ = __getMax__();
      const AstraConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const AstraConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const AstraConfig &__getDefault__();
    static const AstraConfig &__getMax__();
    static const AstraConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const AstraConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void AstraConfig::ParamDescription<std::string>::clamp(AstraConfig &config, const AstraConfig &max, const AstraConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class AstraConfigStatics
  {
    friend class AstraConfig;

    AstraConfigStatics()
    {
AstraConfig::GroupDescription<AstraConfig::DEFAULT, AstraConfig> Default("Default", "", 0, 0, true, &AstraConfig::groups);
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.rgb_preferred = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.rgb_preferred = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.rgb_preferred = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("rgb_preferred", "bool", 0, "Preferred camera stream", "{'enum_description': 'preferred video stream mode', 'enum': [{'srcline': 29, 'description': 'RGB video stream preferred', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const bool', 'value': True, 'ctype': 'bool', 'type': 'bool', 'name': 'RGB'}, {'srcline': 30, 'description': 'IR video stream preferred', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const bool', 'value': False, 'ctype': 'bool', 'type': 'bool', 'name': 'IR'}]}", &AstraConfig::rgb_preferred)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("rgb_preferred", "bool", 0, "Preferred camera stream", "{'enum_description': 'preferred video stream mode', 'enum': [{'srcline': 29, 'description': 'RGB video stream preferred', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const bool', 'value': True, 'ctype': 'bool', 'type': 'bool', 'name': 'RGB'}, {'srcline': 30, 'description': 'IR video stream preferred', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const bool', 'value': False, 'ctype': 'bool', 'type': 'bool', 'name': 'IR'}]}", &AstraConfig::rgb_preferred)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ir_mode = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ir_mode = 17;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ir_mode = 5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<int>("ir_mode", "int", 0, "Video mode for IR camera", "{'enum_description': 'output mode', 'enum': [{'srcline': 10, 'description': '1280x1024@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_30Hz'}, {'srcline': 11, 'description': '1280x1024@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_15Hz'}, {'srcline': 12, 'description': '1280x720@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'XGA_30Hz'}, {'srcline': 13, 'description': '1280x720@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'XGA_15Hz'}, {'srcline': 14, 'description': '640x480@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'VGA_30Hz'}, {'srcline': 15, 'description': '640x480@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'VGA_25Hz'}, {'srcline': 16, 'description': '320x240@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_25Hz'}, {'srcline': 17, 'description': '320x240@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_30Hz'}, {'srcline': 18, 'description': '320x240@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_60Hz'}, {'srcline': 19, 'description': '160x120@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 10, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_25Hz'}, {'srcline': 20, 'description': '160x120@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 11, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_30Hz'}, {'srcline': 21, 'description': '160x120@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 12, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_60Hz'}, {'srcline': 22, 'description': '640x400@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 13, 'ctype': 'int', 'type': 'int', 'name': '640400_30Hz'}, {'srcline': 23, 'description': '320x200@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 14, 'ctype': 'int', 'type': 'int', 'name': '320200_30Hz'}, {'srcline': 24, 'description': '1280x800@7Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 15, 'ctype': 'int', 'type': 'int', 'name': '1280800_7Hz'}, {'srcline': 25, 'description': '1280x800@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': '1280800_30Hz'}, {'srcline': 26, 'description': '640x400@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 17, 'ctype': 'int', 'type': 'int', 'name': '640400_60Hz'}]}", &AstraConfig::ir_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<int>("ir_mode", "int", 0, "Video mode for IR camera", "{'enum_description': 'output mode', 'enum': [{'srcline': 10, 'description': '1280x1024@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_30Hz'}, {'srcline': 11, 'description': '1280x1024@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_15Hz'}, {'srcline': 12, 'description': '1280x720@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'XGA_30Hz'}, {'srcline': 13, 'description': '1280x720@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'XGA_15Hz'}, {'srcline': 14, 'description': '640x480@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'VGA_30Hz'}, {'srcline': 15, 'description': '640x480@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'VGA_25Hz'}, {'srcline': 16, 'description': '320x240@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_25Hz'}, {'srcline': 17, 'description': '320x240@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_30Hz'}, {'srcline': 18, 'description': '320x240@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_60Hz'}, {'srcline': 19, 'description': '160x120@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 10, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_25Hz'}, {'srcline': 20, 'description': '160x120@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 11, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_30Hz'}, {'srcline': 21, 'description': '160x120@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 12, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_60Hz'}, {'srcline': 22, 'description': '640x400@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 13, 'ctype': 'int', 'type': 'int', 'name': '640400_30Hz'}, {'srcline': 23, 'description': '320x200@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 14, 'ctype': 'int', 'type': 'int', 'name': '320200_30Hz'}, {'srcline': 24, 'description': '1280x800@7Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 15, 'ctype': 'int', 'type': 'int', 'name': '1280800_7Hz'}, {'srcline': 25, 'description': '1280x800@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': '1280800_30Hz'}, {'srcline': 26, 'description': '640x400@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 17, 'ctype': 'int', 'type': 'int', 'name': '640400_60Hz'}]}", &AstraConfig::ir_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_mode = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_mode = 17;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_mode = 5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<int>("color_mode", "int", 0, "Video mode for color camera", "{'enum_description': 'output mode', 'enum': [{'srcline': 10, 'description': '1280x1024@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_30Hz'}, {'srcline': 11, 'description': '1280x1024@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_15Hz'}, {'srcline': 12, 'description': '1280x720@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'XGA_30Hz'}, {'srcline': 13, 'description': '1280x720@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'XGA_15Hz'}, {'srcline': 14, 'description': '640x480@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'VGA_30Hz'}, {'srcline': 15, 'description': '640x480@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'VGA_25Hz'}, {'srcline': 16, 'description': '320x240@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_25Hz'}, {'srcline': 17, 'description': '320x240@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_30Hz'}, {'srcline': 18, 'description': '320x240@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_60Hz'}, {'srcline': 19, 'description': '160x120@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 10, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_25Hz'}, {'srcline': 20, 'description': '160x120@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 11, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_30Hz'}, {'srcline': 21, 'description': '160x120@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 12, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_60Hz'}, {'srcline': 22, 'description': '640x400@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 13, 'ctype': 'int', 'type': 'int', 'name': '640400_30Hz'}, {'srcline': 23, 'description': '320x200@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 14, 'ctype': 'int', 'type': 'int', 'name': '320200_30Hz'}, {'srcline': 24, 'description': '1280x800@7Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 15, 'ctype': 'int', 'type': 'int', 'name': '1280800_7Hz'}, {'srcline': 25, 'description': '1280x800@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': '1280800_30Hz'}, {'srcline': 26, 'description': '640x400@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 17, 'ctype': 'int', 'type': 'int', 'name': '640400_60Hz'}]}", &AstraConfig::color_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<int>("color_mode", "int", 0, "Video mode for color camera", "{'enum_description': 'output mode', 'enum': [{'srcline': 10, 'description': '1280x1024@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_30Hz'}, {'srcline': 11, 'description': '1280x1024@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_15Hz'}, {'srcline': 12, 'description': '1280x720@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'XGA_30Hz'}, {'srcline': 13, 'description': '1280x720@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'XGA_15Hz'}, {'srcline': 14, 'description': '640x480@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'VGA_30Hz'}, {'srcline': 15, 'description': '640x480@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'VGA_25Hz'}, {'srcline': 16, 'description': '320x240@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_25Hz'}, {'srcline': 17, 'description': '320x240@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_30Hz'}, {'srcline': 18, 'description': '320x240@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_60Hz'}, {'srcline': 19, 'description': '160x120@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 10, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_25Hz'}, {'srcline': 20, 'description': '160x120@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 11, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_30Hz'}, {'srcline': 21, 'description': '160x120@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 12, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_60Hz'}, {'srcline': 22, 'description': '640x400@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 13, 'ctype': 'int', 'type': 'int', 'name': '640400_30Hz'}, {'srcline': 23, 'description': '320x200@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 14, 'ctype': 'int', 'type': 'int', 'name': '320200_30Hz'}, {'srcline': 24, 'description': '1280x800@7Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 15, 'ctype': 'int', 'type': 'int', 'name': '1280800_7Hz'}, {'srcline': 25, 'description': '1280x800@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': '1280800_30Hz'}, {'srcline': 26, 'description': '640x400@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 17, 'ctype': 'int', 'type': 'int', 'name': '640400_60Hz'}]}", &AstraConfig::color_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.depth_mode = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.depth_mode = 17;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.depth_mode = 5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<int>("depth_mode", "int", 0, "Video mode for depth camera", "{'enum_description': 'output mode', 'enum': [{'srcline': 10, 'description': '1280x1024@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_30Hz'}, {'srcline': 11, 'description': '1280x1024@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_15Hz'}, {'srcline': 12, 'description': '1280x720@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'XGA_30Hz'}, {'srcline': 13, 'description': '1280x720@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'XGA_15Hz'}, {'srcline': 14, 'description': '640x480@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'VGA_30Hz'}, {'srcline': 15, 'description': '640x480@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'VGA_25Hz'}, {'srcline': 16, 'description': '320x240@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_25Hz'}, {'srcline': 17, 'description': '320x240@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_30Hz'}, {'srcline': 18, 'description': '320x240@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_60Hz'}, {'srcline': 19, 'description': '160x120@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 10, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_25Hz'}, {'srcline': 20, 'description': '160x120@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 11, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_30Hz'}, {'srcline': 21, 'description': '160x120@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 12, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_60Hz'}, {'srcline': 22, 'description': '640x400@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 13, 'ctype': 'int', 'type': 'int', 'name': '640400_30Hz'}, {'srcline': 23, 'description': '320x200@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 14, 'ctype': 'int', 'type': 'int', 'name': '320200_30Hz'}, {'srcline': 24, 'description': '1280x800@7Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 15, 'ctype': 'int', 'type': 'int', 'name': '1280800_7Hz'}, {'srcline': 25, 'description': '1280x800@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': '1280800_30Hz'}, {'srcline': 26, 'description': '640x400@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 17, 'ctype': 'int', 'type': 'int', 'name': '640400_60Hz'}]}", &AstraConfig::depth_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<int>("depth_mode", "int", 0, "Video mode for depth camera", "{'enum_description': 'output mode', 'enum': [{'srcline': 10, 'description': '1280x1024@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_30Hz'}, {'srcline': 11, 'description': '1280x1024@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'SXGA_15Hz'}, {'srcline': 12, 'description': '1280x720@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'XGA_30Hz'}, {'srcline': 13, 'description': '1280x720@15Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'XGA_15Hz'}, {'srcline': 14, 'description': '640x480@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 5, 'ctype': 'int', 'type': 'int', 'name': 'VGA_30Hz'}, {'srcline': 15, 'description': '640x480@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 6, 'ctype': 'int', 'type': 'int', 'name': 'VGA_25Hz'}, {'srcline': 16, 'description': '320x240@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 7, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_25Hz'}, {'srcline': 17, 'description': '320x240@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 8, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_30Hz'}, {'srcline': 18, 'description': '320x240@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 9, 'ctype': 'int', 'type': 'int', 'name': 'QVGA_60Hz'}, {'srcline': 19, 'description': '160x120@25Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 10, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_25Hz'}, {'srcline': 20, 'description': '160x120@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 11, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_30Hz'}, {'srcline': 21, 'description': '160x120@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 12, 'ctype': 'int', 'type': 'int', 'name': 'QQVGA_60Hz'}, {'srcline': 22, 'description': '640x400@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 13, 'ctype': 'int', 'type': 'int', 'name': '640400_30Hz'}, {'srcline': 23, 'description': '320x200@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 14, 'ctype': 'int', 'type': 'int', 'name': '320200_30Hz'}, {'srcline': 24, 'description': '1280x800@7Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 15, 'ctype': 'int', 'type': 'int', 'name': '1280800_7Hz'}, {'srcline': 25, 'description': '1280x800@30Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 16, 'ctype': 'int', 'type': 'int', 'name': '1280800_30Hz'}, {'srcline': 26, 'description': '640x400@60Hz', 'srcfile': '/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg', 'cconsttype': 'const int', 'value': 17, 'ctype': 'int', 'type': 'int', 'name': '640400_60Hz'}]}", &AstraConfig::depth_mode)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.depth_registration = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.depth_registration = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.depth_registration = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("depth_registration", "bool", 0, "Depth data registration", "", &AstraConfig::depth_registration)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("depth_registration", "bool", 0, "Depth data registration", "", &AstraConfig::depth_registration)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_depth_synchronization = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_depth_synchronization = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_depth_synchronization = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("color_depth_synchronization", "bool", 0, "Synchronization of color and depth camera", "", &AstraConfig::color_depth_synchronization)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("color_depth_synchronization", "bool", 0, "Synchronization of color and depth camera", "", &AstraConfig::color_depth_synchronization)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_exposure = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_exposure = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_exposure = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("auto_exposure", "bool", 0, "Auto-Exposure", "", &AstraConfig::auto_exposure)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("auto_exposure", "bool", 0, "Auto-Exposure", "", &AstraConfig::auto_exposure)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.auto_white_balance = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.auto_white_balance = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.auto_white_balance = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("auto_white_balance", "bool", 0, "Auto-White-Balance", "", &AstraConfig::auto_white_balance)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("auto_white_balance", "bool", 0, "Auto-White-Balance", "", &AstraConfig::auto_white_balance)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.data_skip = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.data_skip = 10;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.data_skip = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<int>("data_skip", "int", 0, "Skip N images for every image published (rgb/depth/depth_registered/ir)", "", &AstraConfig::data_skip)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<int>("data_skip", "int", 0, "Skip N images for every image published (rgb/depth/depth_registered/ir)", "", &AstraConfig::data_skip)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.ir_time_offset = -1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.ir_time_offset = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.ir_time_offset = -0.033;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("ir_time_offset", "double", 0, "ir image time offset in seconds", "", &AstraConfig::ir_time_offset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("ir_time_offset", "double", 0, "ir image time offset in seconds", "", &AstraConfig::ir_time_offset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.color_time_offset = -1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.color_time_offset = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.color_time_offset = -0.033;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("color_time_offset", "double", 0, "color image time offset in seconds", "", &AstraConfig::color_time_offset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("color_time_offset", "double", 0, "color image time offset in seconds", "", &AstraConfig::color_time_offset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.depth_time_offset = -1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.depth_time_offset = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.depth_time_offset = -0.033;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("depth_time_offset", "double", 0, "depth image time offset in seconds", "", &AstraConfig::depth_time_offset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("depth_time_offset", "double", 0, "depth image time offset in seconds", "", &AstraConfig::depth_time_offset)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.depth_ir_offset_x = -20.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.depth_ir_offset_x = 20.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.depth_ir_offset_x = 5.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("depth_ir_offset_x", "double", 0, "X offset between IR and depth images", "", &AstraConfig::depth_ir_offset_x)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("depth_ir_offset_x", "double", 0, "X offset between IR and depth images", "", &AstraConfig::depth_ir_offset_x)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.depth_ir_offset_y = -20.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.depth_ir_offset_y = 20.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.depth_ir_offset_y = 4.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("depth_ir_offset_y", "double", 0, "Y offset between IR and depth images", "", &AstraConfig::depth_ir_offset_y)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("depth_ir_offset_y", "double", 0, "Y offset between IR and depth images", "", &AstraConfig::depth_ir_offset_y)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.z_offset_mm = -200;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.z_offset_mm = 200;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.z_offset_mm = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<int>("z_offset_mm", "int", 0, "Z offset in mm", "", &AstraConfig::z_offset_mm)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<int>("z_offset_mm", "int", 0, "Z offset in mm", "", &AstraConfig::z_offset_mm)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.z_scaling = 0.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.z_scaling = 1.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.z_scaling = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("z_scaling", "double", 0, "Scaling factor for depth values", "", &AstraConfig::z_scaling)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<double>("z_scaling", "double", 0, "Scaling factor for depth values", "", &AstraConfig::z_scaling)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.use_device_time = 0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.use_device_time = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.use_device_time = 1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("use_device_time", "bool", 0, "Use internal timer of OpenNI device", "", &AstraConfig::use_device_time)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(AstraConfig::AbstractParamDescriptionConstPtr(new AstraConfig::ParamDescription<bool>("use_device_time", "bool", 0, "Use internal timer of OpenNI device", "", &AstraConfig::use_device_time)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(AstraConfig::AbstractGroupDescriptionConstPtr(new AstraConfig::GroupDescription<AstraConfig::DEFAULT, AstraConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<AstraConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<AstraConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<AstraConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    AstraConfig __max__;
    AstraConfig __min__;
    AstraConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const AstraConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static AstraConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &AstraConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const AstraConfig &AstraConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const AstraConfig &AstraConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const AstraConfig &AstraConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<AstraConfig::AbstractParamDescriptionConstPtr> &AstraConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<AstraConfig::AbstractGroupDescriptionConstPtr> &AstraConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const AstraConfigStatics *AstraConfig::__get_statics__()
  {
    const static AstraConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = AstraConfigStatics::get_instance();

    return statics;
  }

//#line 10 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_SXGA_30Hz = 1;
//#line 11 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_SXGA_15Hz = 2;
//#line 12 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_XGA_30Hz = 3;
//#line 13 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_XGA_15Hz = 4;
//#line 14 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_VGA_30Hz = 5;
//#line 15 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_VGA_25Hz = 6;
//#line 16 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_QVGA_25Hz = 7;
//#line 17 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_QVGA_30Hz = 8;
//#line 18 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_QVGA_60Hz = 9;
//#line 19 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_QQVGA_25Hz = 10;
//#line 20 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_QQVGA_30Hz = 11;
//#line 21 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_QQVGA_60Hz = 12;
//#line 22 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_640400_30Hz = 13;
//#line 23 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_320200_30Hz = 14;
//#line 24 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_1280800_7Hz = 15;
//#line 25 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_1280800_30Hz = 16;
//#line 26 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const int Astra_640400_60Hz = 17;
//#line 29 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const bool Astra_RGB = 1;
//#line 30 "/home/mailonghua/ros_ws/src/ros_astra_camera/cfg/Astra.cfg"
      const bool Astra_IR = 0;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __ASTRARECONFIGURATOR_H__
