// Auto-generated. Do not edit!

// (in-package exploration_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class ExploreGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.strategy_plugin = null;
      this.boundary = null;
      this.start_point = null;
    }
    else {
      if (initObj.hasOwnProperty('strategy_plugin')) {
        this.strategy_plugin = initObj.strategy_plugin
      }
      else {
        this.strategy_plugin = '';
      }
      if (initObj.hasOwnProperty('boundary')) {
        this.boundary = initObj.boundary
      }
      else {
        this.boundary = new geometry_msgs.msg.PolygonStamped();
      }
      if (initObj.hasOwnProperty('start_point')) {
        this.start_point = initObj.start_point
      }
      else {
        this.start_point = new geometry_msgs.msg.PointStamped();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ExploreGoal
    // Serialize message field [strategy_plugin]
    bufferOffset = _serializer.string(obj.strategy_plugin, buffer, bufferOffset);
    // Serialize message field [boundary]
    bufferOffset = geometry_msgs.msg.PolygonStamped.serialize(obj.boundary, buffer, bufferOffset);
    // Serialize message field [start_point]
    bufferOffset = geometry_msgs.msg.PointStamped.serialize(obj.start_point, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ExploreGoal
    let len;
    let data = new ExploreGoal(null);
    // Deserialize message field [strategy_plugin]
    data.strategy_plugin = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [boundary]
    data.boundary = geometry_msgs.msg.PolygonStamped.deserialize(buffer, bufferOffset);
    // Deserialize message field [start_point]
    data.start_point = geometry_msgs.msg.PointStamped.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.strategy_plugin.length;
    length += geometry_msgs.msg.PolygonStamped.getMessageSize(object.boundary);
    length += geometry_msgs.msg.PointStamped.getMessageSize(object.start_point);
    return length + 4;
  }

  static datatype() {
    // Returns string type for a message object
    return 'exploration_msgs/ExploreGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '3cc884574b7172d99ae98a7b709ff914';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Name of plugin to use for exploration task
    string strategy_plugin
    
    # Boundary for exploration task
    geometry_msgs/PolygonStamped boundary
    
    # Starting point for exploration task, inside the boundary
    geometry_msgs/PointStamped start_point
    
    # TODO(pbovbel) do we want 'flexible parameters' using json_transport here?
    
    
    ================================================================================
    MSG: geometry_msgs/PolygonStamped
    # This represents a Polygon with reference coordinate frame and timestamp
    Header header
    Polygon polygon
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/Polygon
    #A specification of a polygon where the first and last points are assumed to be connected
    Point32[] points
    
    ================================================================================
    MSG: geometry_msgs/Point32
    # This contains the position of a point in free space(with 32 bits of precision).
    # It is recommeded to use Point wherever possible instead of Point32.  
    # 
    # This recommendation is to promote interoperability.  
    #
    # This message is designed to take up less space when sending
    # lots of points at once, as in the case of a PointCloud.  
    
    float32 x
    float32 y
    float32 z
    ================================================================================
    MSG: geometry_msgs/PointStamped
    # This represents a Point with reference coordinate frame and timestamp
    Header header
    Point point
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ExploreGoal(null);
    if (msg.strategy_plugin !== undefined) {
      resolved.strategy_plugin = msg.strategy_plugin;
    }
    else {
      resolved.strategy_plugin = ''
    }

    if (msg.boundary !== undefined) {
      resolved.boundary = geometry_msgs.msg.PolygonStamped.Resolve(msg.boundary)
    }
    else {
      resolved.boundary = new geometry_msgs.msg.PolygonStamped()
    }

    if (msg.start_point !== undefined) {
      resolved.start_point = geometry_msgs.msg.PointStamped.Resolve(msg.start_point)
    }
    else {
      resolved.start_point = new geometry_msgs.msg.PointStamped()
    }

    return resolved;
    }
};

module.exports = ExploreGoal;
