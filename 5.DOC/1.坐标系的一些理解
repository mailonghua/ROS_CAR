
坐标系的理解
1.坐标系的理解
1.1 base_link坐标系
base_link坐标系一般可以理解为小车的中心点，用来标识小车的位置，一般以X轴作为小车的前进方向，Y轴作为小车的左侧，Z轴垂直于小车的中心~称之右手正则，如下图

绕坐标轴旋转定义
用右手握住坐标轴， 大拇指 的方向朝着坐标轴 朝向的正方向， 四指环绕的方向定义沿着这个坐标轴 旋转的正方向

1.2 base_footprint坐标系
		原点为base_link原点在地面的投影，有些许区别（z值不同）。
		base_link和base_footprint原点的（x, y）相同，都是机器人的俯视图的中心；而base_link原点的z坐标在机器人的腰部，base_footprint的z坐标在地板上。在TF树中，base_link是base_footprint的子节点。
1.3 odom坐标系
odom，也被称之为里程计，该坐标系可以理解小车的起始点，里程计信息是指机器人相对于某一点的距离，也就相当于base_link到到odom坐标系原点的距离，就是机器人当前所走的距离，这个距离是通过里程计计算出来，不一定等于实际距离
		里程计是如何得到的呢？是用轮速里程计、视觉里程计或者惯性单元进行计算出来的当前的小车坐标(以小车的启动点为原点)，在这个坐标系中，新坐标值通常是根据前一个时刻坐标得到的，一般使用odom来表示。
		目前ROS中常用的里程计广义上包括车轮上的光电码盘、惯性导航元件（IMU）、视觉里程计，你可以只用其中的一个作为odom，也可以选择多个进行数据融合，融合结果作为odom。
		该数据是连续的~由于误差会不断的累积，因此该坐标在短时间内是准确的、
1.4 map坐标系
	也称之为地图坐标系，地图坐标系是在这个坐标系中得到坐标值通常是通过传感器的数据重新计算或测量得到的,该数据由于每次得到的坐标点都是重新测量计算得到的，累计误差影响较小

2.坐标系之间的关系
		坐标系的属性，base_link坐标系：始终随着车体进行运动
									base_footprint：base_link的投影
									odom坐标系：是可以变化的
									map坐标系：是固定的，可以理解为坐标的原点
2.1 坐标系的初始状态
	   我们将小车刚上电的位置，并且出于静止的状态视为原点，此时map坐标系、odom、base_link坐标系均是重合的，如下图：
	


2.2运动一定距离后的状态
	下面用平面的(2d)的小车运动来描述		
	    小车从原点运动了一定距离后，里程计测试出小车运动了10m，但是小车实际只运行了7m，也就是base_Link坐标系相对于固定的map坐标系是7m，所以计算的坐标和真实的坐标之间出现而来偏差~
	    但是在ROS中换了个说法进行了描述，不说计算得到的坐标在map中漂移了3m，而是说是odom坐标相对于map坐标漂移了3m，如下图：
		


		所以可以总结为，base_Link相对于map坐标系的真实位置是7m，odom坐标系相对于map坐标系偏移了-3m。计算出来base_link坐标系相对于odom坐标系的距离是10m。
		所以ODOM坐标系到底是什么，该怎么理解呢？
				==》其实odom相当于是根据实际计算得到的坐标和真实坐标之间的变换虚拟出来的一个坐标系
		PS：里程计信息，无论是编码器测试出来还是IMU测试出来，都是会产生误差的，情况是相同的
2.3  ROS中父子坐标系的关系
官网上的坐标系讲解地址
		坐标的父子关系，是指能够使用TF进行坐标的变化(因为TF中只保存了父子关系坐标系的变换矩阵)，当然父子关系不是一定的，但有个普遍的规定(若是不匹配，导航包应该就识别出错，无法完成其所需要的坐标转换)，当前约定的坐标系父子坐标系关系如下图：	


		上图表示，map坐标系是odom的父坐标系，odom是base_link的父坐标系。尽快我们会认为map和odom坐标系都应该链接到base_link坐标系中，但这是不允许的，因为每个坐标系只能有一个父坐标系、
3. TF中坐标系关联建立
3.1 odom_combined -> base_footprint(里程计坐标系->小车底盘投影）
	该映射是有EKF算法，将轮式里程计(odom)和IMU以及VO(视觉里程计)进行融合得到的里程计数据(robot_pose_ekf/odom_combined)，并向TF中提供odom_combined -> base_footprint的关系，也就是里程计坐标和小车底盘投影坐标之间的关联

3.2 base_footprint ->base_imu_link(小车底盘投影坐标系->IMU坐标系)
该联系用来表示小车底盘投影坐标系(z=0)和IMU坐标系转换关系，该部分一般使用静态坐标系建立，如下：
<node pkg="tf" type="static_transform_publisher" 
               name="base_footprint_to_imu" 
               args="-0.1 0 0.05 0 0 0 base_footprint base_imu_link 20"/>
static_transform_publisher：静态坐标系的建立
参数： x，y，z，yaw，pitch，roll ，父坐标系id，子坐标系id，发布频率
也可以使用四元数进行发布：
参数：x y z qx qy qz qw，父坐标系id，子坐标系id，发布频率

3.3 base_footprint -> laser(小车底盘投影坐标系->雷达坐标系)
该坐标系的关系也是固定的，因此使用静态坐标系的建立方法，与3.2相同
<node pkg="tf" type="static_transform_publisher" 
                name="base_foot_print_to_laser" 
                args="0.1 0 0.1 -1.57 0 0 base_footprint laser 20"/>
3.4 map -> odom（map坐标系与里程计坐标系联系）
	该关系的建立是由定位算法AMCL进行建立，其输入和输出如第四节的关系图
经过3.1~3.4多坐标系的建立后那么TF就产生了如下的关系

4.AMCL定位中的坐标系关系
4.1纯里程计定位(Odometry Localization)
		纯里程计定位，也就是表示odom和map坐标系是重叠不变的，关系如下图(frame:标识坐标系的意思)
	


		纯粹里程计定位，也就是直接根据里程计的信息，来计算base_frame和odom_frame之间的偏移（重申，这里是默认odom坐标系和base坐标系始终是绑定在一起的，始终重合），所以这里会有累积误差( 比如2,2中的误差就是3m)，并且这里的误差会随着里程计的增加，它往往会偏差越来越大，越漂越远。

4.2 AMCL(蒙特卡洛自适应定位)地图定位
		AMCL中进行了偏差的校准,关系如下图，该图中不像上图中odom和map坐标系的重叠，这里有了单独的map_frame，那么map_frame和odom之间的偏差是如何得到呢(偏差在图中对应的就是odometry drift参数)？
	


		该定位是通过对比当前的地图 与激光雷达检测到的环境地图，来对自己的位置进行了一个修正，这个修正就体现在odometry drift，把之前的运算得到的漂移补到了map_frame和odom_frame两个坐标系之间。这就是AMCL 校正里程计自身的累计误差。

	在Gmapping中来看map_fram和odom_frame是怎么建立联系的	
	如Gmapping SLAM中，输入输出的节点如下：

4.3 从SLAM-GMAPPING中的话题订阅和发布


Gmapping	输入的topic:/tf和 /scan,其中订阅/tf是用来获取odom_fram和base_frame之间的变换，/scan是雷达的的话题节点
						输出：/tf  和map相关的topic，那么这里的/tf是odom_frame和map_frame之间的变化，那么此时我们就连通了map_frame、odom_frame、和base_frame，及laser_frame
Gmapping的校准：与上面的amcl描述相同，使用激光雷达的数据来修改odom_fram和map_frame之间
参考文章
https://blog.csdn.net/qq_39779233/article/details/105323770
https://sychaichangkun.gitbooks.io/ros-tutorial-icourse163/content/chapter9/9.2.html

